version: '2'
services:
  main:
    image: opuscapita/archive:dev
    depends_on:
      - elasticsearch
      - mysql
      - consul
      - registrator
      - redis
      - kong
      - rabbitmq
      - acl
      - auth
      - api-registry
#      - customer
    labels:
      SERVICE_NAME: 'archive'
      SERVICE_TAGS: 'external'
    environment:
      NODE_ENV: ${NODE_ENV}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      REDIS_AUTH: ${REDIS_AUTH}
      SERVICE_3031_NAME: archive 
      SERVICE_3031_CHECK_HTTP: /api/health/check
      SERVICE_3031_CHECK_INTERVAL: 15s
      SERVICE_3031_CHECK_TIMEOUT: 3s
    ports:
      - '${PORT}:${PORT}'

  auth:
    image: opuscapita/auth:dev
    ports:
      - '$APP_HOST_PORT:$APP_HOST_PORT'
    environment:
      NODE_ENV: $NODE_ENV
      APP_HOST: '0.0.0.0'
      APP_HOST_PROTOCOL: $APP_HOST_PROTOCOL
      APP_HOST_PORT: $APP_HOST_PORT
      GATEWAY_SCHEME: $GATEWAY_SCHEME
      GATEWAY_IP: $GATEWAY_IP
      GATEWAY_PORT: $GATEWAY_PORT
      GATEWAY_CALLBACK: $GATEWAY_CALLBACK
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      REDIS_AUTH: ${REDIS_AUTH}
      SERVICE_3005_CHECK_HTTP: /auth/certs
      SERVICE_3005_CHECK_INTERVAL: 15s
      SERVICE_3005_CHECK_TIMEOUT: 3s
    depends_on:
      - kong
      - consul
    command: 'npm run dev'

    #  customer:
    #    image: opuscapita/customer:dev
    #    depends_on:
    #      - mysql
    #      - consul
    #      - registrator
    #      - redis
    #    labels:
    #      SERVICE_NAME: 'customer'
    #    environment:
    #      SERVICE_3009_CHECK_HTTP: /api/health/check
    #      SERVICE_3009_CHECK_INTERVAL: 15s
    #      SERVICE_3009_CHECK_TIMEOUT: 3s
    #      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    #      MYSQL_DATABASE: ${MYSQL_DATABASE}
    #      REDIS_AUTH: ${REDIS_AUTH}
    #      RABBITMQ_USER: ${RABBITMQ_USER}
    #      RABBITMQ_PASS: ${RABBITMQ_PASS}
    #    ports:
    #      - '3009:3009'
    #    command: 'npm run dev'

  bnp:
    image: opuscapita/bnp:dev
    depends_on:  # as of version 1.9.0 Dockerfile's HEALTHCHECK is not supported yet.
      - acl
      - mysql
      - consul
    labels:
      SERVICE_NAME: 'bnp'
    environment:
      SERVICE_3008_NAME: bnp
      SERVICE_3000_CHECK_HTTP: /api/health/check
      SERVICE_3000_CHECK_INTERVAL: 15s
      SERVICE_3000_CHECK_TIMEOUT: 3s
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      REDIS_AUTH: $REDIS_AUTH
      NODE_ENV: development
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    ports:
      - '3000:3000'
    command: 'npm run dev'

  elasticsearch:
    image: opuscapita/elasticsearch:dev
    environment:
      # This helps ES out with memory usage
      - "ES_JAVA_OPTS=-Xmx512m -Xms512m"
      - SERVICE_9200_NAME=elasticsearch
      - SERVICE_9300_NAME=elasticsearch-TCP
      - SERVICE_9200_CHECK_HTTP=/
      - SERVICE_9200_CHECK_INTERVAL=15s
      - SERVICE_9200_CHECK_TIMEOUT=3s
      - ES_NO_CLUSTER=${ES_NO_CLUSTER}
    depends_on:
      - registrator
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
    image: opuscapita/kibana:dev
    environment:
      ELASTICSEARCH_IP: elasticsearch
      SERVICE_5601_NAME: kibana
      SERVICE_5601_CHECK_HTTP: /
      SERVICE_5601_CHECK_INTERVAL: 15s
      SERVICE_5601_CHECK_TIMEOUT: 3s
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  user:
    image: opuscapita/user:dev
    depends_on:
      - mysql
      - consul
      - registrator
      - rabbitmq
    labels:
      SERVICE_NAME: 'user'
      SERVICE_TAGS: 'external'
    environment:
      MYSQL_DATABASE: $MYSQL_DATABASE
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      REDIS_AUTH: $REDIS_AUTH
      CLIENT_KEY: $CLIENT_KEY
      CLIENT_SECRET: $CLIENT_SECRET
      SCOPE: $SCOPE
      SERVICE_3008_CHECK_HTTP: /api/health/check
      SERVICE_3008_CHECK_INTERVAL: 15s
      SERVICE_3008_CHECK_TIMEOUT: 3s
    ports:
      - '3008:3008'
    command: 'npm run dev'

  kong:
    image: opuscapita/kong:dev
    environment:
      KONG_DATABASE: 'postgres'
      KONG_PG_HOST: $KONG_PG_HOST
      KONG_PG_PORT: $KONG_PG_PORT
      APP_HOST: $HOST_IP
      APP_HOST_PROTOCOL: $APP_HOST_PROTOCOL
      APP_HOST_PORT: $APP_HOST_PORT
      GATEWAY_SCHEME: $GATEWAY_SCHEME
      GATEWAY_IP: $GATEWAY_IP
      GATEWAY_PORT: $GATEWAY_PORT
      GATEWAY_CALLBACK: $GATEWAY_CALLBACK
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      LOG_PORT: 5000
      LOG_HOST: $LOG_HOST
      ACL_HOST: $ACL_HOST
      ACL_PORT: $ACL_PORT
      REDIS_HOST: $HOST_IP # TODO: remove after api-gw is using config
      REDIS_PORT: 6379 # TODO: remove after api-gw is using config
      REDIS_AUTH: $REDIS_AUTH # TODO: remove after api-gw is using config
      SERVICE_8001_NAME: 'kong'
      SERVICE_8080_NAME: 'kong-http'
    ports:
      - '8080:8080'
      - '8443:8443'
      - '8001:8001'
      - '7946:7946'
      - '7946:7946/udp'
    depends_on:
      - postgres
      - mysql
      - redis

  api-registry:
    image: opuscapita/api-registrator:dev
    ports:
      - '$API_REGISTRY_PORT:$API_REGISTRY_PORT'
    environment:
      AUTH_SERVER: $AUTH_SERVER
      AUTH_SERVER_PORT: $AUTH_SERVER_PORT
      API_REGISTRY_PORT: $API_REGISTRY_PORT
      GATEWAY_CALLBACK: $GATEWAY_CALLBACK
      SERVICE_3002_CHECK_HTTP: /api/health/check
      SERVICE_3002_CHECK_INTERVAL: 15s
      SERVICE_3002_CHECK_TIMEOUT: 3s
    depends_on:
      - kong

  postgres:
    image: postgres:9.4
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: $POSTGRES_DB
      POSTGRES_DB: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    depends_on:
      - registrator

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '4369:4369'
      - '5671:5671'
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      SERVICE_5672_NAME: 'rabbitmq-amqp'

  acl:
    image: opuscapita/acl:dev
    labels:
      - 'SERVICE_NAME=acl'
      - 'SERVICE_TAGS=external,kong'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      REDIS_AUTH: ${REDIS_AUTH}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      TEST_USER_KEY: test
      SERVICE_3013_CHECK_HTTP: /api/health/check
      SERVICE_3013_CHECK_INTERVAL: 15s
      SERVICE_3013_CHECK_TIMEOUT: 3s
    ports:
     - '3013:3013'
    depends_on:
      - rabbitmq
      - registrator
      - mysql
    command: 'npm run dev'

  mysql:
    image: 'mysql:5.7'
    ports:
      - '3306:3306'
    labels:
      SERVICE_3306_NAME: 'mysql'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    depends_on:
      - registrator

  registrator:
    image: gliderlabs/registrator
    command: consul://consul:8500
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    depends_on:
      - consul

  redis:
    image: opuscapita/redis:dev
    ports:
      - '6379:6379'
    environment:
      REDIS_AUTH: ${REDIS_AUTH}
    depends_on:
      - registrator

  consul:
    image: consul:latest
    ports:
      - '8400:8400'
      - '8500:8500'
      - '8600:53/udp'
    labels:
      SERVICE_IGNORE: 'true'  # Do not add any of Consul's services to Consul's service discovery registry.
    command: [agent, '-server', '-ui', '-bootstrap', '-client=0.0.0.0']

  blob:
    image: opuscapita/blob:dev
    depends_on:
      - mysql
      - consul
      - registrator
    labels:
      SERVICE_NAME: 'blob'
      SERVICE_TAGS: 'external,kong'
    environment:
        SERVICE_3012_CHECK_HTTP: /api/health/check
        SERVICE_3012_CHECK_TIMEOUT: 3s
        SERVICE_3012_CHECK_INTERVAL: 15s
        RABBITMQ_USER: ${RABBITMQ_USER}
        RABBITMQ_PASS: ${RABBITMQ_PASS}
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        REDIS_AUTH: ${REDIS_AUTH}
    ports:
      - '3012:3012'
    command: 'npm run dev'

volumes:
  esdata1:
    driver: local
